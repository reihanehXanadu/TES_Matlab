function [methodinfo,structs,enuminfo,ThunkLibName]=AlazarInclude
%ALAZARINCLUDE Create structures to define interfaces found in 'AlazarApi'.

%This function was generated by loadlibrary.m parser version 1.1.6.29 on Fri Apr  8 14:59:00 2011
%perl options:'AlazarApi.i -outfile=AlazarInclude.m
%-thunkfile=ATSApi_thunk_pcwin64.c'ZZZZ
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ATSApi_thunk_pcwin64');
% RETURN_CODE AlazarGetOEMFPGAName ( int opcodeID , char * FullPath , unsigned long * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEint32cstringvoidPtrThunk';fcns.name{fcnNum}='AlazarGetOEMFPGAName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarOEMSetWorkingDirectory ( char * wDir , unsigned long * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEcstringvoidPtrThunk';fcns.name{fcnNum}='AlazarOEMSetWorkingDirectory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarOEMGetWorkingDirectory ( char * wDir , unsigned long * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEcstringvoidPtrThunk';fcns.name{fcnNum}='AlazarOEMGetWorkingDirectory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarParseFPGAName ( const char * FullName , char * Name , U32 * Type , U32 * MemSize , U32 * MajVer , U32 * MinVer , U32 * MajRev , U32 * MinRev , U32 * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEcstringcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarParseFPGAName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarOEMDownLoadFPGA ( HANDLE h , char * FileName , U32 * RetValue ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='AlazarOEMDownLoadFPGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarDownLoadFPGA ( HANDLE h , char * FileName , U32 * RetValue ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='AlazarDownLoadFPGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarReadWriteTest ( HANDLE h , U32 * Buffer , U32 SizeToWrite , U32 SizeToRead ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarReadWriteTest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarMemoryTest ( HANDLE h , U32 * errors ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarMemoryTest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarBusyFlag ( HANDLE h , int * BusyFlag ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarBusyFlag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarTriggeredFlag ( HANDLE h , int * TriggeredFlag ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarTriggeredFlag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% U32 AlazarBoardsFound (); 
fcns.thunkname{fcnNum}='ulongThunk';fcns.name{fcnNum}='AlazarBoardsFound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HANDLE AlazarOpen ( char * BoardNameID ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='AlazarOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void AlazarClose ( HANDLE h ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='AlazarClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% MSILS AlazarGetBoardKind ( HANDLE h ); 
fcns.thunkname{fcnNum}='MSILSvoidPtrThunk';fcns.name{fcnNum}='AlazarGetBoardKind'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MSILS'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetCPLDVersion ( HANDLE h , U8 * Major , U8 * Minor ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetCPLDVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetChannelInfo ( HANDLE h , U32 * MemSize , U8 * SampleSize ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetChannelInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetSDKVersion ( U8 * Major , U8 * Minor , U8 * Revision ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetSDKVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetDriverVersion ( U8 * Major , U8 * Minor , U8 * Revision ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetDriverVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarInputControl ( HANDLE h , U8 Channel , U32 Coupling , U32 InputRange , U32 Impedance ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtruint8ulongulongulongThunk';fcns.name{fcnNum}='AlazarInputControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetPosition ( HANDLE h , U8 Channel , int PMPercent , U32 InputRange ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtruint8int32ulongThunk';fcns.name{fcnNum}='AlazarSetPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'int32', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetExternalTrigger ( HANDLE h , U32 Coupling , U32 Range ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarSetExternalTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetTriggerDelay ( HANDLE h , U32 Delay ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarSetTriggerDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetTriggerTimeOut ( HANDLE h , U32 to_ns ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarSetTriggerTimeOut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarTriggerTimedOut ( HANDLE h ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarTriggerTimedOut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetTriggerAddress ( HANDLE h , U32 Record , U32 * TriggerAddress , U32 * TimeStampHighPart , U32 * TimeStampLowPart ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetTriggerAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetTriggerOperation ( HANDLE h , U32 TriggerOperation , U32 TriggerEngine1 , U32 Source1 , U32 Slope1 , U32 Level1 , U32 TriggerEngine2 , U32 Source2 , U32 Slope2 , U32 Level2 ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongulongulongulongulongulongulongulongThunk';fcns.name{fcnNum}='AlazarSetTriggerOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetTriggerTimestamp ( HANDLE h , U32 Record , U64 * Timestamp_samples ); 
% fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetTriggerTimestamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetTriggerOperationForScanning ( HANDLE h , U32 slope , U32 level , U32 options ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongulongThunk';fcns.name{fcnNum}='AlazarSetTriggerOperationForScanning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarAbortCapture ( HANDLE h ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrThunk';fcns.name{fcnNum}='AlazarAbortCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarForceTrigger ( HANDLE h ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrThunk';fcns.name{fcnNum}='AlazarForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarForceTriggerEnable ( HANDLE h ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrThunk';fcns.name{fcnNum}='AlazarForceTriggerEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarStartCapture ( HANDLE h ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrThunk';fcns.name{fcnNum}='AlazarStartCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarCaptureMode ( HANDLE h , U32 Mode ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarCaptureMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarStreamCapture ( HANDLE h , void * Buffer , U32 BufferSize , U32 DeviceOption , U32 ChannelSelect , U32 * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarStreamCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarHyperDisp ( HANDLE h , void * Buffer , U32 BufferSize , U8 * ViewBuffer , U32 ViewBufferSize , U32 NumOfPixels , U32 Option , U32 ChannelSelect , U32 Record , long TransferOffset , U32 * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongvoidPtrulongulongulongulongulonglongvoidPtrThunk';fcns.name{fcnNum}='AlazarHyperDisp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint8Ptr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'long', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarFastPRRCapture ( HANDLE h , void * Buffer , U32 BufferSize , U32 DeviceOption , U32 ChannelSelect , U32 * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarFastPRRCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarBusy ( HANDLE h ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarBusy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarTriggered ( HANDLE h ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarTriggered'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetStatus ( HANDLE h ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarDetectMultipleRecord ( HANDLE h ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDetectMultipleRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetRecordCount ( HANDLE h , U32 Count ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarSetRecordCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetRecordSize ( HANDLE h , U32 PreSize , U32 PostSize ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarSetRecordSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetCaptureClock ( HANDLE h , U32 Source , U32 Rate , U32 Edge , U32 Decimation ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongulongulongThunk';fcns.name{fcnNum}='AlazarSetCaptureClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetExternalClockLevel ( HANDLE h , float percent ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrfloatThunk';fcns.name{fcnNum}='AlazarSetExternalClockLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'single'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetClockSwitchOver ( HANDLE hBoard , U32 uMode , U32 uDummyClockOnTime_ns , U32 uReserved ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongulongThunk';fcns.name{fcnNum}='AlazarSetClockSwitchOver'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarRead ( HANDLE h , U32 Channel , void * Buffer , int ElementSize , long Record , long TransferOffset , U32 TransferLength ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrint32longlongulongThunk';fcns.name{fcnNum}='AlazarRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'int32', 'long', 'long', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetParameter ( HANDLE h , U8 Channel , U32 Parameter , long Value ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtruint8ulonglongThunk';fcns.name{fcnNum}='AlazarSetParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'long'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetParameterUL ( HANDLE h , U8 Channel , U32 Parameter , U32 Value ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtruint8ulongulongThunk';fcns.name{fcnNum}='AlazarSetParameterUL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetParameter ( HANDLE h , U8 Channel , U32 Parameter , long * RetValue ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtruint8ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'longPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetParameterUL ( HANDLE h , U8 Channel , U32 Parameter , U32 * RetValue ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtruint8ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetParameterUL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% HANDLE AlazarGetSystemHandle ( U32 sid ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='AlazarGetSystemHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% U32 AlazarNumOfSystems (); 
fcns.thunkname{fcnNum}='ulongThunk';fcns.name{fcnNum}='AlazarNumOfSystems'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% U32 AlazarBoardsInSystemBySystemID ( U32 sid ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='AlazarBoardsInSystemBySystemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% U32 AlazarBoardsInSystemByHandle ( HANDLE systemHandle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarBoardsInSystemByHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HANDLE AlazarGetBoardBySystemID ( U32 sid , U32 brdNum ); 
fcns.thunkname{fcnNum}='voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarGetBoardBySystemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% HANDLE AlazarGetBoardBySystemHandle ( HANDLE systemHandle , U32 brdNum ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarGetBoardBySystemHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetLED ( HANDLE h , U32 state ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarSetLED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarQueryCapability ( HANDLE h , U32 request , U32 value , U32 * retValue ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarQueryCapability'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarMaxSglTransfer ( ALAZAR_BOARDTYPES bt ); 
fcns.thunkname{fcnNum}='ulongALAZAR_BOARDTYPESThunk';fcns.name{fcnNum}='AlazarMaxSglTransfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'BoardTypes'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetMaxRecordsCapable ( HANDLE h , U32 RecordLength , U32 * num ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetMaxRecordsCapable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetWhoTriggeredBySystemHandle ( HANDLE systemHandle , U32 brdNum , U32 recNum ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarGetWhoTriggeredBySystemHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarGetWhoTriggeredBySystemID ( U32 sid , U32 brdNum , U32 recNum ); 
fcns.thunkname{fcnNum}='ulongulongulongulongThunk';fcns.name{fcnNum}='AlazarGetWhoTriggeredBySystemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSetBWLimit ( HANDLE h , U32 Channel , U32 enable ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarSetBWLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarSleepDevice ( HANDLE h , U32 state ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarSleepDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarStartAutoDMA ( HANDLE h , void * Buffer1 , U32 UseHeader , U32 ChannelSelect , long TransferOffset , U32 TransferLength , long RecordsPerBuffer , long RecordCount , AUTODMA_STATUS * error , U32 r1 , U32 r2 , U32 * r3 , U32 * r4 ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongulonglongulonglonglongvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarStartAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'long', 'ulong', 'long', 'long', 'voidPtr', 'ulong', 'ulong', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetNextAutoDMABuffer ( HANDLE h , void * Buffer1 , void * Buffer2 , long * WhichOne , long * RecordsTransfered , AUTODMA_STATUS * error , U32 r1 , U32 r2 , long * TriggersOccurred , U32 * r4 ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetNextAutoDMABuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'longPtr', 'longPtr', 'voidPtr', 'ulong', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarGetNextBuffer ( HANDLE h , void * Buffer1 , void * Buffer2 , long * WhichOne , long * RecordsTransfered , AUTODMA_STATUS * error , U32 r1 , U32 r2 , long * TriggersOccurred , U32 * r4 ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetNextBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'longPtr', 'longPtr', 'voidPtr', 'ulong', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarCloseAUTODma ( HANDLE h ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrThunk';fcns.name{fcnNum}='AlazarCloseAUTODma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarAbortAutoDMA ( HANDLE h , void * Buffer , AUTODMA_STATUS * error , U32 r1 , U32 r2 , U32 * r3 , U32 * r4 ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarAbortAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'ulong', 'ulong', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetAutoDMAHeaderValue ( HANDLE h , U32 Channel , void * DataBuffer , U32 Record , U32 Parameter , AUTODMA_STATUS * error ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetAutoDMAHeaderValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% float AlazarGetAutoDMAHeaderTimeStamp ( HANDLE h , U32 Channel , void * DataBuffer , U32 Record , AUTODMA_STATUS * error ); 
fcns.thunkname{fcnNum}='floatvoidPtrulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetAutoDMAHeaderTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% void * AlazarGetAutoDMAPtr ( HANDLE h , U32 DataOrHeader , U32 Channel , void * DataBuffer , U32 Record , AUTODMA_STATUS * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetAutoDMAPtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarWaitForBufferReady ( HANDLE h , long tms ); 
fcns.thunkname{fcnNum}='ulongvoidPtrlongThunk';fcns.name{fcnNum}='AlazarWaitForBufferReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarEvents ( HANDLE h , U32 enable ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarEvents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarBeforeAsyncRead ( HANDLE hBoard , U32 uChannelSelect , long lTransferOffset , U32 uSamplesPerRecord , U32 uRecordsPerBuffer , U32 uRecordsPerAcquisition , U32 uFlags ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulonglongulongulongulongulongThunk';fcns.name{fcnNum}='AlazarBeforeAsyncRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'long', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarAsyncRead ( HANDLE hBoard , void * pBuffer , U32 BytesToRead , OVERLAPPED * pOverlapped ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarAsyncRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarAbortAsyncRead ( HANDLE hBoard ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrThunk';fcns.name{fcnNum}='AlazarAbortAsyncRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarPostAsyncBuffer ( HANDLE hDevice , void * pBuffer , U32 uBufferLength_bytes ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarPostAsyncBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarWaitAsyncBufferComplete ( HANDLE hDevice , void * pBuffer , U32 uTimeout_ms ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarWaitAsyncBufferComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarWaitNextAsyncBufferComplete ( HANDLE hDevice , void * pBuffer , U32 uBufferLength_bytes , U32 uTimeout_ms ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarWaitNextAsyncBufferComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarCreateStreamFileA ( HANDLE hDevice , const char * pszFilePath ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrcstringThunk';fcns.name{fcnNum}='AlazarCreateStreamFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarCreateStreamFileW ( HANDLE hDevice , const WCHAR * pszFilePath ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarCreateStreamFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% long AlazarFlushAutoDMA ( HANDLE h ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='AlazarFlushAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void AlazarStopAutoDMA ( HANDLE h ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='AlazarStopAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarResetTimeStamp ( HANDLE h , U32 resetFlag ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongThunk';fcns.name{fcnNum}='AlazarResetTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarReadRegister ( HANDLE hDevice , U32 offset , U32 * retVal , U32 pswrd ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='AlazarReadRegister'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarWriteRegister ( HANDLE hDevice , U32 offset , U32 Val , U32 pswrd ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongulongThunk';fcns.name{fcnNum}='AlazarWriteRegister'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarDACSetting ( HANDLE h , U32 SetGet , U32 OriginalOrModified , U8 Channel , U32 DACNAME , U32 Coupling , U32 InputRange , U32 Impedance , U32 * getVal , U32 setVal , U32 * error ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulonguint8ulongulongulongulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDACSetting'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'uint8', 'ulong', 'ulong', 'ulong', 'ulong', 'ulongPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarConfigureAuxIO ( HANDLE hDevice , U32 uMode , U32 uParameter ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarConfigureAuxIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% const char * AlazarErrorToText ( RETURN_CODE code ); 
fcns.thunkname{fcnNum}='cstringRETURN_CODEThunk';fcns.name{fcnNum}='AlazarErrorToText'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% RETURN_CODE AlazarConfigureSampleSkipping ( HANDLE boardHandle , U32 mode , U32 sampleClocksPerRecord , WORD * pClocksToSkipMask ); 
fcns.thunkname{fcnNum}='RETURN_CODEvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarConfigureSampleSkipping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
structs.s_BoardDef.members=struct('RecordCount', 'ulong', 'RecLength', 'ulong', 'PreDepth', 'ulong', 'ClockSource', 'ulong', 'ClockEdge', 'ulong', 'SampleRate', 'ulong', 'CouplingChanA', 'ulong', 'InputRangeChanA', 'ulong', 'InputImpedChanA', 'ulong', 'CouplingChanB', 'ulong', 'InputRangeChanB', 'ulong', 'InputImpedChanB', 'ulong', 'TriEngOperation', 'ulong', 'TriggerEngine1', 'ulong', 'TrigEngSource1', 'ulong', 'TrigEngSlope1', 'ulong', 'TrigEngLevel1', 'ulong', 'TriggerEngine2', 'ulong', 'TrigEngSource2', 'ulong', 'TrigEngSlope2', 'ulong', 'TrigEngLevel2', 'ulong');
structs.s_HEADER2.members=struct('TimeStampLowPart', 'ulong');
structs.s_ALAZAR_HEADER.members=struct('hdr0', 'uint32', 'hdr1', 'uint32', 'hdr2', 'uint32', 'hdr3', 'uint32');
enuminfo.AUTODMA_STATUS=struct('ADMA_Completed',0,'ADMA_Buffer1Invalid',1,'ADMA_Buffer2Invalid',2,'ADMA_BoardHandleInvalid',3,'ADMA_InternalBuffer1Invalid',4,'ADMA_InternalBuffer2Invalid',5,'ADMA_OverFlow',6,'ADMA_InvalidChannel',7,'ADMA_DMAInProgress',8,'ADMA_UseHeaderNotSet',9,'ADMA_HeaderNotValid',10,'ADMA_InvalidRecsPerBuffer',11,'ADMA_InvalidTransferOffset',12,'ADMA_InvalidCFlags',13);
enuminfo.BoardTypes=struct('ATS_NONE',0,'ATS850',1,'ATS310',2,'ATS330',3,'ATS855',4,'ATS315',5,'ATS335',6,'ATS460',7,'ATS860',8,'ATS660',9,'ATS665',10,'ATS9462',11,'ATS9434',12,'ATS9870',13,'ATS9350',14,'ATS9325',15,'ATS9440',16,'ATS_LAST',17);
enuminfo.MSILS=struct('KINDEPENDENT',0,'KSLAVE',1,'KMASTER',2,'KLASTSLAVE',3);
methodinfo=fcns;